#pragma once

#include "util.hpp"
#include "util_cuda.h"
#include "kernels.hcu"

template<typename K, typename... As>
auto bench_simple(const benchmark_parameters& p, K kernel, As... as) {
    std::vector<double> res;
    for (auto rep = 0; rep < p.repetitions; ++rep) {
        auto t0 = timer::now();
        device_synch();
        for (auto epoch = 0ul; epoch < p.epochs; ++epoch) {
	    for (auto slot = 0ul; slot < p.slots; ++slot) {
	        for (auto k = 0ul; k < p.kernels_per_slot; ++k) {
		    auto kernel_idx = k + slot*p.kernels_per_slot;
		    kernel<<<p.blocks, p.threads>>>(offset_parameter(as, p.array_size_per_kernel, kernel_idx)...);
		}
	    }
        }
        device_synch();
        auto t1 = timer::now();
        res.push_back(delta_t(t0, t1));
    }

    return res;
}
